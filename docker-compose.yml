version: '3.7'

services:
  db:
    image: postgres:12.0-alpine
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    network_mode: "host"

  rabbitmq:
    image: rabbitmq:3-management
    # uses port 5672 for AMQP and 15672 for the management interface
    restart: unless-stopped
    network_mode: "host"

  helios:
    build:
        context: .
        dockerfile: Dockerfile
        target: helios
    command: bash -c "python manage.py migrate && python manage.py runserver"
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - rabbitmq
    network_mode: "host"

  helios_worker:
    build:
        context: .
        dockerfile: Dockerfile
        target: helios
    command: bash -c "celery --app helios worker --events --beat --concurrency=1"
    env_file:
      - .env
    restart: unless-stopped
    depends_on:
      - db
      - helios
      - rabbitmq
    network_mode: "host"

  return_code_server:
    build:
        context: .
        dockerfile: Dockerfile
        target: players-api
    environment:
      - RETURN_CODE_SERVER=1
      - PORT=${RETURN_CODE_SERVER_PORT}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ${PWD}/volumes/return_code_database:/var/players-api/data
    network_mode: "host"

  shuffle_server:
    build:
        context: .
        dockerfile: Dockerfile
        target: players-api
    environment:
      - SHUFFLE_SERVER=1
      - PORT=${SHUFFLE_SERVER_PORT}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ${PWD}/volumes/shuffle_database:/var/players-api/data
    network_mode: "host"

  auditor:
    build:
        context: .
        dockerfile: Dockerfile
        target: players-api
    environment:
      - AUDITOR=1
      - PORT=${AUDITOR_PORT}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ${PWD}/volumes/auditor_database:/var/players-api/data
    network_mode: "host"

  phone:
    build:
        context: .
        dockerfile: Dockerfile
        target: players-api
    environment:
      - PHONE=1
      - PORT=${PHONE_PORT}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ${PWD}/volumes/phone_database:/var/players-api/data
    network_mode: "host"

  voter:
    build:
        context: .
        dockerfile: Dockerfile
        target: players-api
    environment:
      - VOTER=1
      - PORT=${VOTER_PORT}
    env_file:
      - .env
    restart: unless-stopped
    volumes:
      - ${PWD}/volumes/voter_database:/var/players-api/data
    network_mode: "host"

volumes:
  logs_volume:
    driver: local
  postgres_volume:
    driver: local